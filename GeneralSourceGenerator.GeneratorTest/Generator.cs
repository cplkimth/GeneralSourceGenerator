using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.CodeAnalysis;

namespace GeneralSourceGenerator.GeneratorTest;

public class Generator
{
    private const string Template = 
@"
// <auto-generated> This file has been generated by GeneralSourceGenerator</auto-generated>
{0}

namespace {1}
{{
    public partial class {2}
    {{
       {3}
    }}
}}";

    public static string Generate(string code)
    {
        var syntaxTree = CSharpSyntaxTree.ParseText(code);
        var root = syntaxTree.GetRoot() as CompilationUnitSyntax;

        var classDec = root.DescendantNodesAndSelf()
            .OfType<ClassDeclarationSyntax>()
            .FirstOrDefault(x => x.AttributeLists.Any(y => y.Attributes.Any(z => z.Name.ToString() == "Asyncified")));

        if (classDec == null)
            return string.Empty;
        
        string usingCode = ReadUsing(root);
        string namespaceCode = ReadNamespace(classDec);
        string classCode = ReadClass(classDec);
        string methodCode = ReadUsing(root);

        return string.Format(Template, usingCode, namespaceCode, classCode, methodCode);
    }

    private static string ReadClass(ClassDeclarationSyntax classDec)
    {
        var text = classDec.ToFullString();
        text = text.Split('{')[0];

        return Regex.Replace(text, @"\[.{1,}\]", string.Empty);
    }

    private static string ReadNamespace(ClassDeclarationSyntax classDec)
    {
        var f = classDec.ConstraintClauses.FirstOrDefault();
        return string.Empty;
    }

    private static string ReadUsing(CompilationUnitSyntax root)
    {
        return root.Usings.ToFullString();
    }
}